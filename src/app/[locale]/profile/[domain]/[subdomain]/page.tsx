import React from "react";
import { Metadata } from "next";
import { notFound } from "next/navigation";
import { api } from "@/trpc/server";
import {
  generateSchemaOrgWebPage,
  generateSchemaOrgBreadcrumbList,
  generateSchemaOrgDataset,
} from "@/app/_lib/profile/schema";
import DomainDataVisualizer from "@/app/_components/profile/DomainDataVisualizer";
import TableOfContents from "@/app/_components/profile/TableOfContents";

interface PageProps {
  params: {
    locale: string;
    domain: string;
    subdomain: string;
  };
}

// Define domain and subdomain metadata
const domains = {
  demographics: {
    title: "‡§ú‡§®‡§∏‡§æ‡§Ç‡§ñ‡•ç‡§Ø‡§ø‡§ï‡•Ä ‡§µ‡§ø‡§µ‡§∞‡§£",
    description:
      "‡§ñ‡§ú‡•Å‡§∞‡§æ ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§ï‡•ã ‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§∏‡§Æ‡•ç‡§¨‡§®‡•ç‡§ß‡•Ä ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§µ‡§ø‡§µ‡§∞‡§£ - ‡§ú‡§æ‡§§‡§ø, ‡§≤‡§ø‡§ô‡•ç‡§ó, ‡§â‡§Æ‡•á‡§∞ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞‡§ï‡•ã ‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£",
    icon: "üë•",
    color: "bg-blue-50 text-blue-700",
    subdomains: {
      caste: {
        title: "‡§ú‡§æ‡§§‡•Ä‡§Ø ‡§µ‡§ø‡§µ‡§∞‡§£",
        description:
          "‡§ñ‡§ú‡•Å‡§∞‡§æ ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§Æ‡§æ ‡§¨‡§∏‡•ã‡§¨‡§æ‡§∏ ‡§ó‡§∞‡•ç‡§®‡•á ‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§ú‡§æ‡§§‡§ú‡§æ‡§§‡§ø‡§π‡§∞‡•Ç‡§ï‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£",
        dataType: "wardWiseCastePopulation",
        sections: [
          { id: "overview", title: "‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§ú‡§æ‡§§‡•Ä‡§Ø ‡§µ‡§ø‡§µ‡§∞‡§£" },
          { id: "ward-wise", title: "‡§µ‡§°‡§æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ú‡§æ‡§§‡•Ä‡§Ø ‡§µ‡§ø‡§µ‡§∞‡§£" },
          { id: "charts", title: "‡§ö‡§æ‡§∞‡•ç‡§ü ‡§§‡§•‡§æ ‡§ó‡•ç‡§∞‡§æ‡§´‡§π‡§∞‡•Ç" },
          { id: "table", title: "‡§§‡§æ‡§≤‡§ø‡§ï‡§æ" },
        ],
      },
      gender: {
        title: "‡§≤‡§ø‡§ô‡•ç‡§ó ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§µ‡§ø‡§µ‡§∞‡§£",
        description: "‡§ñ‡§ú‡•Å‡§∞‡§æ ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§ï‡•ã ‡§≤‡§ø‡§ô‡•ç‡§ó ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞‡§ï‡•ã ‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£",
        dataType: "wardWiseHouseHeadGender",
        sections: [
          { id: "overview", title: "‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§≤‡§ø‡§ô‡•ç‡§ó ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§µ‡§ø‡§µ‡§∞‡§£" },
          { id: "househead", title: "‡§ò‡§∞‡§Æ‡•Å‡§≤‡•Ä ‡§≤‡§ø‡§ô‡•ç‡§ó ‡§µ‡§ø‡§µ‡§∞‡§£" },
          { id: "ward-wise", title: "‡§µ‡§°‡§æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§≤‡§ø‡§ô‡•ç‡§ó ‡§µ‡§ø‡§µ‡§∞‡§£" },
          { id: "charts", title: "‡§ö‡§æ‡§∞‡•ç‡§ü ‡§§‡§•‡§æ ‡§ó‡•ç‡§∞‡§æ‡§´‡§π‡§∞‡•Ç" },
        ],
      },
      "age-distribution": {
        title: "‡§â‡§Æ‡•á‡§∞ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ",
        description: "‡§ñ‡§ú‡•Å‡§∞‡§æ ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§ï‡•ã ‡§â‡§Æ‡•á‡§∞ ‡§∏‡§Æ‡•Ç‡§π ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞‡§ï‡•ã ‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£",
        dataType: "wardAgeWisePopulation",
        sections: [
          { id: "overview", title: "‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§â‡§Æ‡•á‡§∞ ‡§µ‡§ø‡§µ‡§∞‡§£" },
          { id: "age-groups", title: "‡§â‡§Æ‡•á‡§∞ ‡§∏‡§Æ‡•Ç‡§π ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ" },
          { id: "ward-wise", title: "‡§µ‡§°‡§æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§â‡§Æ‡•á‡§∞ ‡§∏‡§Æ‡•Ç‡§π ‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ" },
          { id: "charts", title: "‡§ö‡§æ‡§∞‡•ç‡§ü ‡§§‡§•‡§æ ‡§ó‡•ç‡§∞‡§æ‡§´‡§π‡§∞‡•Ç" },
        ],
      },
      religion: {
        title: "‡§ß‡§æ‡§∞‡•ç‡§Æ‡§ø‡§ï ‡§µ‡§ø‡§µ‡§∞‡§£",
        description: "‡§ñ‡§ú‡•Å‡§∞‡§æ ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§Æ‡§æ ‡§Ö‡§µ‡§≤‡§Æ‡•ç‡§¨‡§® ‡§ó‡§∞‡§ø‡§®‡•á ‡§ß‡§∞‡•ç‡§Æ‡§π‡§∞‡•Ç‡§ï‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£",
        dataType: "wardWiseReligionPopulation",
        sections: [
          { id: "overview", title: "‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§ß‡§æ‡§∞‡•ç‡§Æ‡§ø‡§ï ‡§µ‡§ø‡§µ‡§∞‡§£" },
          { id: "ward-wise", title: "‡§µ‡§°‡§æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ß‡§æ‡§∞‡•ç‡§Æ‡§ø‡§ï ‡§µ‡§ø‡§µ‡§∞‡§£" },
          { id: "charts", title: "‡§ö‡§æ‡§∞‡•ç‡§ü ‡§§‡§•‡§æ ‡§ó‡•ç‡§∞‡§æ‡§´‡§π‡§∞‡•Ç" },
        ],
      },
      "mother-tongue": {
        title: "‡§Æ‡§æ‡§§‡•É‡§≠‡§æ‡§∑‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£",
        description: "‡§ñ‡§ú‡•Å‡§∞‡§æ ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§Æ‡§æ ‡§¨‡•ã‡§≤‡§ø‡§®‡•á ‡§Æ‡§æ‡§§‡•É‡§≠‡§æ‡§∑‡§æ‡§π‡§∞‡•Ç‡§ï‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£",
        dataType: "wardWiseMotherTonguePopulation",
        sections: [
          { id: "overview", title: "‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§Æ‡§æ‡§§‡•É‡§≠‡§æ‡§∑‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£" },
          { id: "ward-wise", title: "‡§µ‡§°‡§æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§Æ‡§æ‡§§‡•É‡§≠‡§æ‡§∑‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£" },
          { id: "charts", title: "‡§ö‡§æ‡§∞‡•ç‡§ü ‡§§‡§•‡§æ ‡§ó‡•ç‡§∞‡§æ‡§´‡§π‡§∞‡•Ç" },
        ],
      },
    },
  },
  health: {
    title: "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§µ‡§ø‡§µ‡§∞‡§£",
    description:
      "‡§ñ‡§ú‡•Å‡§∞‡§æ ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§ï‡•ã ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•á‡§µ‡§æ, ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§π‡§∞‡•Ç ‡§∞ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§Æ‡•ç‡§¨‡§®‡•ç‡§ß‡•Ä ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä",
    icon: "üè•",
    color: "bg-green-50 text-green-700",
    subdomains: {
      facilities: {
        title: "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç",
        description: "‡§ñ‡§ú‡•Å‡§∞‡§æ ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§Æ‡§æ ‡§∞‡§π‡•á‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç‡§ï‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£",
        dataType: "healthFacilities",
        sections: [
          { id: "overview", title: "‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£" },
          { id: "ward-wise", title: "‡§µ‡§°‡§æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç" },
          { id: "types", title: "‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç" },
          { id: "maps", title: "‡§®‡§ï‡•ç‡§∏‡§æ‡§Æ‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç" },
        ],
      },
      indicators: {
        title: "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•Ç‡§ö‡§ï‡§π‡§∞‡•Ç",
        description: "‡§ñ‡§ú‡•Å‡§∞‡§æ ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§ï‡•ã ‡§™‡•ç‡§∞‡§Æ‡•Å‡§ñ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•Ç‡§ö‡§ï‡§π‡§∞‡•Ç‡§ï‡•ã ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
        dataType: "healthIndicators",
        sections: [
          { id: "overview", title: "‡§™‡•ç‡§∞‡§Æ‡•Å‡§ñ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•Ç‡§ö‡§ï‡§π‡§∞‡•Ç" },
          { id: "maternal", title: "‡§Æ‡§æ‡§§‡•É ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•Ç‡§ö‡§ï‡§π‡§∞‡•Ç" },
          { id: "child", title: "‡§¨‡§æ‡§≤ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•Ç‡§ö‡§ï‡§π‡§∞‡•Ç" },
          { id: "ward-wise", title: "‡§µ‡§°‡§æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•Ç‡§ö‡§ï‡§π‡§∞‡•Ç" },
        ],
      },
    },
  },
  cooperatives: {
    title: "‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç",
    description:
      "‡§ñ‡§ú‡•Å‡§∞‡§æ ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§Æ‡§æ ‡§∞‡§π‡•á‡§ï‡§æ ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç‡§ï‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§∞ ‡§§‡§•‡•ç‡§Ø‡§æ‡§ô‡•ç‡§ï‡§π‡§∞‡•Ç",
    icon: "üè¢",
    color: "bg-yellow-50 text-yellow-700",
    subdomains: {
      list: {
        title: "‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç‡§ï‡•ã ‡§∏‡•Ç‡§ö‡•Ä",
        description:
          "‡§ñ‡§ú‡•Å‡§∞‡§æ ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§Æ‡§æ ‡§∞‡§π‡•á‡§ï‡§æ ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç‡§ï‡•ã ‡§®‡§æ‡§Æ‡§æ‡§µ‡§≤‡•Ä ‡§∞ ‡§µ‡§ø‡§µ‡§∞‡§£",
        dataType: "cooperativesList",
        sections: [
          { id: "overview", title: "‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§µ‡§ø‡§µ‡§∞‡§£" },
          { id: "ward-wise", title: "‡§µ‡§°‡§æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä‡§π‡§∞‡•Ç" },
          { id: "types", title: "‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä‡§π‡§∞‡•Ç" },
          { id: "directory", title: "‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂‡§ø‡§ï‡§æ" },
        ],
      },
      statistics: {
        title: "‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§§‡§•‡•ç‡§Ø‡§æ‡§ô‡•ç‡§ï",
        description:
          "‡§ñ‡§ú‡•Å‡§∞‡§æ ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§Æ‡§æ ‡§∞‡§π‡•á‡§ï‡§æ ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§π‡§∞‡•Ç‡§ï‡•ã ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ï ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
        dataType: "cooperativesStats",
        sections: [
          { id: "overview", title: "‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§§‡§•‡•ç‡§Ø‡§æ‡§ô‡•ç‡§ï" },
          { id: "members", title: "‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§µ‡§ø‡§µ‡§∞‡§£" },
          { id: "financial", title: "‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§µ‡§ø‡§µ‡§∞‡§£" },
          { id: "charts", title: "‡§ö‡§æ‡§∞‡•ç‡§ü ‡§§‡§•‡§æ ‡§ó‡•ç‡§∞‡§æ‡§´‡§π‡§∞‡•Ç" },
        ],
      },
    },
  },
};

// Generate metadata for SEO
export async function generateMetadata({
  params,
}: PageProps): Promise<Metadata> {
  const domain = domains[params.domain as keyof typeof domains];
  if (!domain) {
    return { title: "‡§™‡•É‡§∑‡•ç‡§† ‡§´‡•á‡§≤‡§æ ‡§™‡§∞‡•á‡§®" };
  }

  const subdomains = domain.subdomains as Record<
    string,
    { title: string; description: string }
  >;
  const subdomain = subdomains[params.subdomain];
  if (!subdomain) {
    return { title: "‡§™‡•É‡§∑‡•ç‡§† ‡§´‡•á‡§≤‡§æ ‡§™‡§∞‡•á‡§®" };
  }

  return {
    title: `${subdomain.title} | ${domain.title} | ‡§ñ‡§ú‡•Å‡§∞‡§æ ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤`,
    description: subdomain.description,
    keywords: [
      "‡§ñ‡§ú‡•Å‡§∞‡§æ ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ",
      domain.title,
      subdomain.title,
      "‡§™‡§æ‡§≤‡§ø‡§ï‡§æ ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤",
      "‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§§‡§π",
      "‡§®‡•á‡§™‡§æ‡§≤",
    ],
    alternates: {
      canonical: `/${params.locale}/profile/${params.domain}/${params.subdomain}`,
    },
  };
}

// Generate static paths for all domains and subdomains for SSG
export async function generateStaticParams() {
  const locales = ["ne", "en"];
  const paths: Array<{ locale: string; domain: string; subdomain: string }> =
    [];

  for (const locale of locales) {
    for (const [domainKey, domain] of Object.entries(domains)) {
      for (const subdomainKey of Object.keys(domain.subdomains)) {
        paths.push({
          locale,
          domain: domainKey,
          subdomain: subdomainKey,
        });
      }
    }
  }

  return paths;
}

export default async function SubdomainPage({ params }: PageProps) {
  const { locale, domain: domainId, subdomain: subdomainId } = params;

  const domain = domains[domainId as keyof typeof domains];
  if (!domain) {
    notFound();
  }

  const subdomains = domain.subdomains as Record<
    string,
    {
      title: string;
      description: string;
      dataType: string;
      sections: Array<{ id: string; title: string }>;
    }
  >;
  const subdomain = subdomains[subdomainId];
  if (!subdomain) {
    notFound();
  }

  // Fetch data based on the subdomain data type
  let data;
  try {
    if (domainId === "demographics") {
      switch (subdomain.dataType) {
        case "wardWiseCastePopulation":
          data =
            await api.profile.demographics.wardWiseCastePopulation.summary.query();
          break;
        case "wardWiseHouseHeadGender":
          data =
            await api.profile.demographics.wardWiseHouseHeadGender.summary.query();
          break;
        case "wardAgeWisePopulation":
          data =
            await api.profile.demographics.wardAgeWisePopulation.summary.query();
          break;
        case "wardWiseReligionPopulation":
          data =
            await api.profile.demographics.wardWiseReligionPopulation.summary.query();
          break;
        case "wardWiseMotherTonguePopulation":
          data =
            await api.profile.demographics.wardWiseMotherTonguePopulation.summary.query();
          break;
        default:
          // Fallback to summary data
          data = await api.profile.demographics.summary.get.query();
          break;
      }
    }
    // Add similar conditional fetching for other domains when implemented
  } catch (error) {
    console.error(
      `Failed to fetch data for ${domainId}/${subdomainId}:`,
      error,
    );
    data = null;
  }

  // Generate structured data for SEO
  const webPageSchema = generateSchemaOrgWebPage(
    `${subdomain.title} | ${domain.title} | ‡§ñ‡§ú‡•Å‡§∞‡§æ ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤`,
    subdomain.description,
    `https://digprofile.com/khajura/${locale}/profile/${domainId}/${subdomainId}`,
  );

  const breadcrumbSchema = generateSchemaOrgBreadcrumbList([
    { name: "‡§ó‡•É‡§π‡§™‡•É‡§∑‡•ç‡§†", item: `https://digprofile.com/khajura/${locale}` },
    {
      name: "‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤",
      item: `https://digprofile.com/khajura/${locale}/profile`,
    },
    {
      name: domain.title,
      item: `https://digprofile.com/khajura/${locale}/profile/${domainId}`,
    },
    {
      name: subdomain.title,
      item: `https://digprofile.com/khajura/${locale}/profile/${domainId}/${subdomainId}`,
    },
  ]);

  const datasetSchema = generateSchemaOrgDataset(
    `${subdomain.title} - ‡§ñ‡§ú‡•Å‡§∞‡§æ ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ`,
    subdomain.description,
    `https://digprofile.com/khajura/${locale}/profile/${domainId}/${subdomainId}`,
    ["‡§™‡§æ‡§≤‡§ø‡§ï‡§æ ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤", domain.title, subdomain.title],
    "‡§ñ‡§ú‡•Å‡§∞‡§æ ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ",
  );

  const sections = subdomain.sections;

  return (
    <div className="flex flex-col lg:flex-row lg:gap-8">
      {/* Main content area */}
      <div className="flex-1">
        {/* Structured data */}
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{ __html: JSON.stringify(webPageSchema) }}
        />
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{ __html: JSON.stringify(breadcrumbSchema) }}
        />
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{ __html: JSON.stringify(datasetSchema) }}
        />

        <div className="prose max-w-none">
          <div
            className={`inline-flex items-center justify-center w-12 h-12 rounded-full ${domain.color} mb-4 text-2xl`}
          >
            {domain.icon}
          </div>
          <h1>{subdomain.title}</h1>
          <p className="lead text-gray-600">{subdomain.description}</p>
        </div>

        {/* Domain-specific data visualization component */}
        <DomainDataVisualizer
          domain={domainId}
          subdomain={subdomainId}
          data={data}
          sections={sections}
          locale={locale}
        />
      </div>

      {/* Right sidebar - Table of Contents */}
      <div className="hidden lg:block lg:w-64 flex-shrink-0">
        <div className="sticky top-24">
          <TableOfContents sections={sections} />
        </div>
      </div>
    </div>
  );
}
